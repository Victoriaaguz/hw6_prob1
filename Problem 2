/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
    if(root == NULL){return new TreeNode(val);} //If root does not exist value becomes new root.
    TreeNode* r = root; //Creation of pointer to root.
    while(true){ //While loop
        if(r->val > val){ //If root value is bigger than input value this if-statement is triggered.
            if(r->left){r = r->left;} //If the left node is pointing at something move the pointer down to the left node.
            else{r->left = new TreeNode(val); break;} //Else if the left node is pointing at NULL the value becomes the new node.Break from the While-loop.
        }
        else{
            if(r->right){r = r->right;} //If the right node is pointing at something move the pointer down to the right node.
            else{r->right = new TreeNode(val); break;} //Else if the right node is pointing at NULL the value becomes the new node. Break fromt he While-loop.
        }
    }
    return root; //Return root.
}
};
