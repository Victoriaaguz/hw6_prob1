/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
         if(root) // sets up a loop for recurrsive search
            if(key < root->val) root->left = deleteNode(root->left, key);// search left 
            else if(key > root->val) root->right = deleteNode(root->right, key);// search right     
            else{
                if(!root->left && !root->right) return NULL;  //if neither right or left return null pointer (no child)    
                if (!root->left || !root->right) // found one child and puts it with parent 
                    return root->left ? root->left : root->right;
					                                                
                TreeNode* temp = root->left;      // in case there is more than one child with parent.         
                while(temp->right != NULL) temp = temp->right;    
                root->val = temp->val;
                root->left = deleteNode(root->left, temp->val);  
            }
        return root;
    }   
};
